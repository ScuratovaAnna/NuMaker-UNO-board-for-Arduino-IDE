 /**-------------------------------------------------------------------
 *\date  10.09.2023
 *
 * Ссылки на источник :
 * https://github.com/Solderingironspb/Lessons-Stm32/tree/Practice%2311
 * https://www.youtube.com/watch?v=ajEqZN5s5xc
 *
 *************************************************************************
 * В данном примере подключим, инициализируем и выведем Logo на дисплей.
 *************************************************************************
 *
 *   NuMaker  UNO             GMG12864 
 *   ---------------         ------------
 *  |               |       |
 *  |               |       |
 *  |               |       |
 *  |   (PB.11)  8~ | ----> | CS  (CS)
 *  |   (PA.14)  9~ | ----> | RSE (RST(Reset))
 *  |   (PA.13) 10~ | ----> | RS  (DC(Data/Command) 
 *  |               |       |
 *  |   (PC.1)      | ----> | SCL (SCK)    SPI0_CLK   Physical Pin 27
 *  |   (PC.3)      | ----> | SI  (MOSI)   SPI0_MOSI  Physical Pin 25
 *  |               |       |
 *  |         +3.3V | <---> | +3.3V
 *  |           GND | <---> | GND
 *  |         +3.3V | <---> | +3.3V 
 *  |           GND | <---> | GND
 *
 *\ author         PivnevNikolay , ScuratovaAnna 
 *\ сode debugging ScuratovaAnna
 */

#include <SPI.h>

#define CS_Pin   8
#define cs_set()    digitalWrite(CS_Pin, LOW)  //CS_Pin --> GND
#define cs_reset()  digitalWrite(CS_Pin, HIGH) //CS_Pin --> +3.3v
#define RST_Pin  9
#define RST_set()   digitalWrite(RST_Pin, LOW) //RST_Pin --> GND
#define RST_reset() digitalWrite(RST_Pin, HIGH)//RST_Pin --> +3.3v
#define DC_Pin   10
#define DC_set()    digitalWrite(DC_Pin, LOW)  //DC_Pin --> GND
#define DC_reset()  digitalWrite(DC_Pin, HIGH) //DC_Pin --> +3.3v

uint8_t Frame_buffer[1024] = { 0, }; //Frame Buffer
/*--------------------------------------- Logo ---------------------------------------*/
const char young_woman[] = { 0x00, 0x00, 0x00, 0x00, 0x7C, 0xFC, 0x80, 0x80, 0x7C, 0x00, 0x00, 0x00, 0x00, 0xAA, 0xFF, 0xFD,
  0x01, 0xFF, 0x11, 0x00, 0x0A, 0xAB, 0x7F, 0xF1, 0x0F, 0xFF, 0xF4, 0xDA, 0xFF, 0xFF, 0xFF, 0x5B,
  0x94, 0x80, 0x80, 0x80, 0x80, 0xC0, 0xC0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0xC0, 0x80, 0xC0,
  0xC0, 0xC0, 0xE0, 0xE0, 0xF0, 0xE0, 0x70, 0x70, 0xB0, 0xB8, 0xB0, 0xF8, 0x9C, 0xFA, 0xFF, 0xBF,
  0xF3, 0xEE, 0xFA, 0xFF, 0x7F, 0xAB, 0xEA, 0xFF, 0xFF, 0x22, 0xFD, 0x00, 0x2F, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0x00, 0x00, 0x10, 0x08, 0x24, 0x14, 0x54, 0x54, 0x14, 0x24, 0x08, 0x10, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x8C, 0x9E, 0x92, 0xF2, 0x60, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xEA, 0xBF,
  0xFD, 0xD5, 0x04, 0x00, 0x00, 0x96, 0xA9, 0xF7, 0x48, 0xBF, 0x56, 0xFF, 0xFF, 0xFF, 0xFF, 0x77,
  0xB7, 0xF9, 0x72, 0xF9, 0xF4, 0xF9, 0xF8, 0xFD, 0xF9, 0x7B, 0x7B, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0x7F, 0xFF, 0xFE, 0x7E, 0xFE, 0xFC, 0xFC, 0xF0, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xF0, 0xEC, 0x7A, 0xFE, 0xFD, 0x7E, 0x7F, 0x3F, 0x1F,
  0x3F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xEF, 0xFF, 0xFD, 0xF7, 0xDF, 0xFF, 0xAA, 0xDF, 0x51, 0x00, 0xFF, 0xFF, 0x85,
  0x7F, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x7F, 0x19, 0x39, 0x6F, 0x46, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0x92, 0x92, 0x6C, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFA,
  0xEF, 0xFF, 0xFD, 0x50, 0x00, 0x02, 0xA8, 0x8F, 0xFD, 0xD5, 0x2B, 0xFF, 0xFF, 0xFF, 0x55, 0x05,
  0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0x0B, 0x17, 0x05, 0x2D, 0x08, 0x09, 0x53, 0x0A, 0x13, 0x0B,
  0x53, 0x09, 0x00, 0x08, 0x02, 0x02, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x06, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00,
  0x08, 0x04, 0x08, 0x0A, 0x04, 0x00, 0x0A, 0x02, 0x0B, 0x0B, 0x17, 0x0F, 0x07, 0x2B, 0xAE, 0x53,
  0xBF, 0xF7, 0xFA, 0x2F, 0xFF, 0xFF, 0xFE, 0xAB, 0xFF, 0x56, 0xFB, 0x56, 0x29, 0x8A, 0xFF, 0xFF,
  0x80, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x7F, 0x49, 0x49, 0x49, 0x41, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xF0, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xC0, 0x20, 0x8A, 0xF6, 0xBF, 0xEA, 0xBF, 0xFF, 0xFF, 0xFB, 0x40,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x52,
  0x8A, 0x3D, 0xFF, 0xFF, 0xFD, 0xFF, 0xFF, 0x7F, 0xFA, 0xDF, 0x75, 0xDB, 0x55, 0x04, 0xFA, 0xDF,
  0xFD, 0x02, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x7F, 0x02, 0x0C, 0x02, 0x7F, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xE7, 0xF7, 0x14, 0x14, 0x24, 0x00, 0x00, 0x00, 0x00, 0xEB, 0xBF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF4, 0x4A, 0xEA, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFC, 0xD0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x80, 0x20, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x10, 0xA2,
  0x4A, 0xB5, 0xDE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFF, 0xDD, 0xFF, 0x51, 0xBE, 0x40, 0xFF,
  0x5F, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x7F, 0x41, 0x41, 0x7F, 0x3E, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xF3, 0xF7, 0x14, 0x14, 0xE2, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xF5, 0xCA,
  0x2F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFD, 0xF4, 0x50, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0C, 0x14, 0x10, 0x28,
  0x30, 0xB8, 0x70, 0x78, 0x3A, 0x5C, 0x1F, 0x0E, 0x0F, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x08, 0xD2, 0x2D, 0xD2,
  0xAD, 0xFE, 0xF2, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xB7, 0xED, 0xFA, 0x7F, 0x95,
  0xF0, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x03, 0x01, 0x7F, 0x7F, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0xC7, 0xC4, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0xFD, 0xFF, 0xFF,
  0xFF, 0xFA, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF5, 0xA9, 0xD4, 0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x40, 0x60, 0xC0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xE0, 0xF0, 0xE0, 0xE0, 0xE0,
  0xE0, 0xC0, 0xE0, 0xC1, 0xE0, 0xE0, 0xF0, 0xE0, 0xF0, 0xF0, 0x70, 0xF0, 0x70, 0xF0, 0x70, 0x70,
  0x70, 0x18, 0x30, 0x10, 0x10, 0x00, 0x00, 0x00, 0x88, 0x00, 0xA2, 0x04, 0xD1, 0x2A, 0xD5, 0xBE,
  0xEB, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDD, 0xEB, 0xFE, 0xFF,
  0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x7F, 0x49, 0x49, 0x49, 0x41, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x03, 0x03, 0x0F, 0x0F, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x4F, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFA, 0xF5, 0xE0, 0x48, 0xA0, 0x40, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x05, 0x18, 0x05, 0x38, 0x51, 0x30, 0x70,
  0x68, 0xB0, 0x61, 0x74, 0x69, 0xB4, 0x78, 0x54, 0x7A, 0x1E, 0x59, 0x0E, 0x13, 0x06, 0x01, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA8, 0x50, 0xA4, 0xBA, 0xED, 0xFA, 0xFF, 0xFD, 0xFF,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xCF, 0xF9, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF,
  0xFF, 0xFF, 0x00, 0x00, 0x04, 0x08, 0x12, 0x14, 0x15, 0x15, 0x14, 0x12, 0x08, 0x04, 0x00, 0x00};
/*--------------------------------------- Logo ---------------------------------------*/
void setup() { 
  SPI.setDataMode(SPI_MODE3);
  SPI.setClockDivider(16);
  SPI.begin(); 
  pinMode(CS_Pin  , OUTPUT);
  pinMode(RST_Pin , OUTPUT);
  pinMode(DC_Pin  , OUTPUT);

  GMG12864_Init();
  delay(100);//pause
  GMG12864_Clean_Frame_buffer();
	for (int i = 0; i < 1024; i++) {
		Frame_buffer[i] = young_woman[i];
	}
	GMG12864_Update();
}

void loop(){
  
}
/*-------------------- The function of clearing the frame buffer ---------------------*/
void GMG12864_Clean_Frame_buffer(void) {
	memset(Frame_buffer, 0x00, sizeof(Frame_buffer));
}
/*-------------------- The function of clearing the frame buffer ---------------------*/
/*------------------------- Display initialization function --------------------------*/
void GMG12864_Init(void) {
	cs_set();
	RST_set();
	RST_reset();
	GMG12864_Send_command(0xA2);// Set the duty cycle ( 1/7 or 1/9 ) depending on the physical LCD display
	//** Set the horizontal and vertical orientation to a known state **//
	GMG12864_Send_command(0xA0);      //ADC selection(SEG0->SEG128)
	GMG12864_Send_command(0xC8);      //SHL selection(COM0->COM64)
	GMG12864_Send_command(0x20 | 0x7);// the divider of the internal resistor is set to 7 (from 0..7)
	GMG12864_Send_command(0x28 | 0x7);// power management, all indoor units are on (from 0..7)
	//****** enter dynamic contrast mode ******//
	GMG12864_Send_command(0x81);      //Electronic Volume
	GMG12864_Send_command(15);	      // Contrast adjustment. Adjust on your display. Maximum 63.
	GMG12864_Send_command(0x40);
	//****** CMD_DISPLAY_ON  CMD_DISPLAY_OFF ******//
	GMG12864_Send_command(0xAF);      //Display on
	//****** Inverting the screen ******//
	GMG12864_Send_command(0xA7);      //0xA6 - nomal, 0xA7 - revers
	cs_reset();
}
/*------------------------- Display initialization function --------------------------*/
/*------------ The function of sending a command to the display ----------------------*/
 void GMG12864_Send_command(uint8_t Command) {
	DC_set();
	SPI.transfer(Command); 
	DC_reset();
}
/*------------ The function of sending a command to the display ----------------------*/
/*--------------- The function of sending data to the display ------------------------*/
 void GMG12864_Send_data(uint8_t Dat) {
	 SPI.transfer(Dat); 
}
/*--------------- The function of sending data to the display ------------------------*/
/*------------------------------------------------------------------------------------*/
void ST7565_SetX(uint8_t x) {
  GMG12864_Send_command(((x) & 0xF0) >> 4 | 0x10);
  GMG12864_Send_command((x) & 0x0F);
}	
/*------------------------------------------------------------------------------------*/
void ST7565_SetY(uint8_t y) {
	GMG12864_Send_command(((y) & 0x07 ) | 0xB0 );
}
/*------------------------------------------------------------------------------------*/
/*------------- The function of output of the frame buffer to the display ------------*/
void GMG12864_Update(void) {
	cs_set();
	for (uint8_t y = 0; y < 8; y++) {
		ST7565_SetX(0);
		ST7565_SetY((int16_t )y);
		for (uint8_t x = 0; x < 128; x++) {
			GMG12864_Send_data(Frame_buffer[x + 128 * y]);
		}
	}
	cs_reset();
}
/*------------- The function of output of the frame buffer to the display ------------*/
